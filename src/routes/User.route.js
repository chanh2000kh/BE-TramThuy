const express = require('express')
const router = express.Router()
const jwtServices = require("../services/jwt.service")
const { checkRole } = require('../middleware/checkRole.middleware')
const Controller = require('../controllers/User.controller')
const Validate = require("../validators/index")
const { defaultRoles } = require('../config/defineModel')
const SchemaValidateUser = require("../validators/user.validator")

router.post('/createUser', Validate.body(SchemaValidateUser.createUser), Controller.createUserAsync)
router.post('/registerbyemail', Validate.body(SchemaValidateUser.registerByEmail), Controller.registerByEmailAsync)
router.post('/loginUser', Validate.body(SchemaValidateUser.loginUser), Controller.loginUserAsync)
router.post('/loginwithGoogle', Validate.body(SchemaValidateUser.loginGoogle), Controller.loginwithGoogleAsync)
router.get('/findUserByToken', jwtServices.verify, Controller.findUserByTokenAsync)
router.put('/editProfile', jwtServices.verify, Validate.body(SchemaValidateUser.editProfile), Controller.editProfileAsync)
router.post('/forgotPassword', Controller.forgotPasswordAsync)
router.post('/resetPassword', Validate.body(SchemaValidateUser.resetPassword), Controller.resetPasswordAsync)
router.post('/verifyUser', Validate.body(SchemaValidateUser.verifyUser), Controller.verifyUserAsync)
router.post('/changePassword', jwtServices.verify, Validate.body(SchemaValidateUser.changePass), Controller.changePasswordAsync)
module.exports = router